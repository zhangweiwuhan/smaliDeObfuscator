#####SMALI COMMANDS RULES#####
cmdAny =  cmdAddFloat;
cmdAny =/ cmdAddFloat2addr;
cmdAny =/ cmdAddDouble;
cmdAny =/ cmdAddDouble2addr;
cmdAny =/ cmdAddInt;
cmdAny =/ cmdAddInt2addr;
cmdAny =/ cmdAddIntLit16;
cmdAny =/ cmdAddIntLit8;
cmdAny =/ cmdAddLong;
cmdAny =/ cmdAddLong2addr;
cmdAny =/ cmdAndInt;
cmdAny =/ cmdAndInt2addr;
cmdAny =/ cmdAndIntLit16;
cmdAny =/ cmdAndIntLit8;
cmdAny =/ cmdAndLong;
cmdAny =/ cmdAndLong2addr;
cmdAny =/ cmdAget;
cmdAny =/ cmdAgetBoolean;
cmdAny =/ cmdAgetByte;
cmdAny =/ cmdAgetChar;
cmdAny =/ cmdAgetObject;
cmdAny =/ cmdAgetShort;
cmdAny =/ cmdAgetWide;
cmdAny =/ cmdAput;
cmdAny =/ cmdAputBoolean;
cmdAny =/ cmdAputByte;
cmdAny =/ cmdAputChar;
cmdAny =/ cmdAputObject;
cmdAny =/ cmdAputShort;
cmdAny =/ cmdAputWide;
cmdAny =/ cmdArrayLength;
cmdAny =/ cmdCheckCast;
cmdAny =/ cmdCmpgDouble;
cmdAny =/ cmdCmpgFloat;
cmdAny =/ cmdCmplDouble;
cmdAny =/ cmdCmplFloat;
cmdAny =/ cmdCmpLong;
cmdAny =/ cmdConst;
cmdAny =/ cmdConst16;
cmdAny =/ cmdConst4;
cmdAny =/ cmdConstClass;
cmdAny =/ cmdConstHigh16;
cmdAny =/ cmdConstString;
cmdAny =/ cmdConstStringJumbo;
cmdAny =/ cmdConstWide;
cmdAny =/ cmdConstWide16;
cmdAny =/ cmdConstWide32;
cmdAny =/ cmdConstWideHigh16;
cmdAny =/ cmdDivFloat;
cmdAny =/ cmdDivFloat2addr;
cmdAny =/ cmdDivDouble;
cmdAny =/ cmdDivDouble2addr;
cmdAny =/ cmdDivInt;
cmdAny =/ cmdDivInt2addr;
cmdAny =/ cmdDivIntLit16;
cmdAny =/ cmdDivIntLit8;
cmdAny =/ cmdDivLong;
cmdAny =/ cmdDivLong2addr;
cmdAny =/ cmdDoubleToFloat;
cmdAny =/ cmdDoubleToInt;
cmdAny =/ cmdDoubleToLong;
cmdAny =/ cmdFillArrayData;
cmdAny =/ cmdFilledNewArray;
cmdAny =/ cmdFilledNewArrayRange;
cmdAny =/ cmdFloatToDouble;
cmdAny =/ cmdFloatToInt;
cmdAny =/ cmdFloatToLong;
cmdAny =/ cmdGoto;
cmdAny =/ cmdGoto16;
cmdAny =/ cmdGoto32;
cmdAny =/ cmdIfEq;
cmdAny =/ cmdIfEqz;
cmdAny =/ cmdIfGe;
cmdAny =/ cmdIfGez;
cmdAny =/ cmdIfGt;
cmdAny =/ cmdIfGtz;
cmdAny =/ cmdIfLe;
cmdAny =/ cmdIfLez;
cmdAny =/ cmdIfLt;
cmdAny =/ cmdIfLtz;
cmdAny =/ cmdIfNe;
cmdAny =/ cmdIfNez;
cmdAny =/ cmdIget;
cmdAny =/ cmdIgetBoolean;
cmdAny =/ cmdIgetByte;
cmdAny =/ cmdIgetChar;
cmdAny =/ cmdIgetObject;
cmdAny =/ cmdIgetShort;
cmdAny =/ cmdIgetWide;
cmdAny =/ cmdInstanceOf;
cmdAny =/ cmdIntToByte;
cmdAny =/ cmdIntToChar;
cmdAny =/ cmdIntToDouble;
cmdAny =/ cmdIntToFloat;
cmdAny =/ cmdIntToLong;
cmdAny =/ cmdIntToShort;
cmdAny =/ cmdInvokeDirect;
cmdAny =/ cmdInvokeDirectRange;
cmdAny =/ cmdInvokeInterface;
cmdAny =/ cmdInvokeInterfaceRange;
cmdAny =/ cmdInvokeStatic;
cmdAny =/ cmdInvokeStaticRange;
cmdAny =/ cmdInvokeSuper;
cmdAny =/ cmdInvokeSuperRange;
cmdAny =/ cmdInvokeVirtual;
cmdAny =/ cmdInvokeVirtualRange;
cmdAny =/ cmdIput;
cmdAny =/ cmdIputBoolean;
cmdAny =/ cmdIputByte;
cmdAny =/ cmdIputChar;
cmdAny =/ cmdIputObject;
cmdAny =/ cmdIputShort;
cmdAny =/ cmdIputWide;
cmdAny =/ cmdLongToDouble;
cmdAny =/ cmdLongToFloat;
cmdAny =/ cmdLongToInt;
cmdAny =/ cmdMonitorEnter;
cmdAny =/ cmdMonitorExit;
cmdAny =/ cmdMove;
cmdAny =/ cmdMove16;
cmdAny =/ cmdMoveFrom16;
cmdAny =/ cmdMoveObject;
cmdAny =/ cmdMoveObject16;
cmdAny =/ cmdMoveObjectFrom16;
cmdAny =/ cmdMoveResult;
cmdAny =/ cmdMoveResultObject;
cmdAny =/ cmdMoveResultWide;
cmdAny =/ cmdMoveWide;
cmdAny =/ cmdMoveWide16;
cmdAny =/ cmdMoveWideFrom16;
cmdAny =/ cmdMulFloat;
cmdAny =/ cmdMulFloat2addr;
cmdAny =/ cmdMulDouble;
cmdAny =/ cmdMulDouble2addr;
cmdAny =/ cmdMulInt;
cmdAny =/ cmdMulInt2addr;
cmdAny =/ cmdMulIntLit16;
cmdAny =/ cmdMulIntLit8;
cmdAny =/ cmdMulLong;
cmdAny =/ cmdMulLong2addr;
cmdAny =/ cmdNegDouble;
cmdAny =/ cmdNegFloat;
cmdAny =/ cmdNegInt;
cmdAny =/ cmdNegLong;
cmdAny =/ cmdNewArray;
cmdAny =/ cmdNewInstance;
cmdAny =/ cmdNop;
cmdAny =/ cmdNotInt;
cmdAny =/ cmdNotLong;
cmdAny =/ cmdOrInt;
cmdAny =/ cmdOrInt2addr;
cmdAny =/ cmdOrIntLit16;
cmdAny =/ cmdOrIntLit8;
cmdAny =/ cmdOrLong;
cmdAny =/ cmdOrLong2addr;
cmdAny =/ cmdPackedSwitch;
cmdAny =/ cmdRemFloat;
cmdAny =/ cmdRemFloat2addr;
cmdAny =/ cmdRemDouble;
cmdAny =/ cmdRemDouble2addr;
cmdAny =/ cmdRemInt;
cmdAny =/ cmdRemInt2addr;
cmdAny =/ cmdRemIntLit16;
cmdAny =/ cmdRemIntLit8;
cmdAny =/ cmdRemLong;
cmdAny =/ cmdRemLong2addr;
cmdAny =/ cmdReturn;
cmdAny =/ cmdReturnObject;
cmdAny =/ cmdReturnVoid;
cmdAny =/ cmdReturnWide;
cmdAny =/ cmdRsubInt;
cmdAny =/ cmdRsubIntLit8;
cmdAny =/ cmdSget;
cmdAny =/ cmdSgetBoolean;
cmdAny =/ cmdSgetByte;
cmdAny =/ cmdSgetChar;
cmdAny =/ cmdSgetObject;
cmdAny =/ cmdSgetShort;
cmdAny =/ cmdSgetWide;
cmdAny =/ cmdShlInt;
cmdAny =/ cmdShlInt2addr;
cmdAny =/ cmdShlIntLit8;
cmdAny =/ cmdShlLong;
cmdAny =/ cmdShlLong2addr;
cmdAny =/ cmdShrInt;
cmdAny =/ cmdShrInt2addr;
cmdAny =/ cmdShrIntLit8;
cmdAny =/ cmdShrLong;
cmdAny =/ cmdShrLong2addr;
cmdAny =/ cmdSparseSwitch;
cmdAny =/ cmdSput;
cmdAny =/ cmdSputBoolean;
cmdAny =/ cmdSputByte;
cmdAny =/ cmdSputChar;
cmdAny =/ cmdSputObject;
cmdAny =/ cmdSputShort;
cmdAny =/ cmdSputWide;
cmdAny =/ cmdSubFloat;
cmdAny =/ cmdSubFloat2addr;
cmdAny =/ cmdSubDouble;
cmdAny =/ cmdSubDouble2addr;
cmdAny =/ cmdSubInt;
cmdAny =/ cmdSubInt2addr;
cmdAny =/ cmdSubLong;
cmdAny =/ cmdSubLong2addr;
cmdAny =/ cmdThrow;
cmdAny =/ cmdUshrInt;
cmdAny =/ cmdUshrInt2addr;
cmdAny =/ cmdUshrIntLit8;
cmdAny =/ cmdUshrLong;
cmdAny =/ cmdUshrLong2addr;
cmdAny =/ cmdXorInt;
cmdAny =/ cmdXorInt2addr;
cmdAny =/ cmdXorIntLit16;
cmdAny =/ cmdXorIntLit8;
cmdAny =/ cmdXorLong;
cmdAny =/ cmdXorLong2addr;

cmdAny =/ cmdAddIntLit16_2;
cmdAny =/ cmdAddIntLit8_2;

cmdAny =/ cmdCommon;

cmdAddFloat             = optPadding "add-float" padding codeRegisterVDst listSeparator codeRegister listSeparator codeRegister optPadding [padding commentSequence] CRLF;
cmdAddFloat2addr        = optPadding "add-float/2addr" padding codeRegisterVDst listSeparator codeRegister optPadding [padding commentSequence] CRLF;
cmdAddDouble            = optPadding "add-double" padding codeRegisterV64Dst listSeparator codeRegister64 listSeparator codeRegister64 optPadding [padding commentSequence] CRLF;
cmdAddDouble2addr       = optPadding "add-double/2addr" padding codeRegisterV64Dst listSeparator codeRegister64 optPadding [padding commentSequence] CRLF;
cmdAddInt               = optPadding "add-int" padding codeRegisterVDst listSeparator codeRegister listSeparator codeRegister optPadding [padding commentSequence] CRLF;
cmdAddInt2addr          = optPadding "add-int/2addr" padding codeRegisterVDst listSeparator codeRegister optPadding [padding commentSequence] CRLF;
cmdAddIntLit16          = optPadding "add-int/lit16" padding codeRegisterVDst listSeparator codeRegister listSeparator intValue optPadding [padding commentSequence] CRLF;
cmdAddIntLit8           = optPadding "add-int/lit8" padding codeRegisterVDst listSeparator codeRegister listSeparator intValue optPadding [padding commentSequence] CRLF;

#zhw
cmdAddIntLit16_2          = optPadding "add-int/lit16" padding codeRegister listSeparator codeRegister listSeparator intValue optPadding [padding commentSequence] CRLF;
cmdAddIntLit8_2           = optPadding "add-int/lit8" padding codeRegister listSeparator codeRegister listSeparator intValue optPadding [padding commentSequence] CRLF;

cmdAddLong              = optPadding "add-long" padding codeRegisterV64Dst listSeparator codeRegister64 listSeparator codeRegister64 optPadding [padding commentSequence] CRLF;
cmdAddLong2addr         = optPadding "add-long/2addr" padding codeRegisterV64Dst listSeparator codeRegister64 optPadding [padding commentSequence] CRLF;
cmdAndInt               = optPadding "and-int" padding codeRegisterVDst listSeparator codeRegister listSeparator codeRegister optPadding [padding commentSequence] CRLF;
cmdAndInt2addr          = optPadding "and-int/2addr" padding codeRegisterVDst listSeparator codeRegister optPadding [padding commentSequence] CRLF;
cmdAndIntLit16          = optPadding "and-int/lit16" padding codeRegisterVDst listSeparator codeRegister listSeparator intValue optPadding [padding commentSequence] CRLF;
cmdAndIntLit8           = optPadding "and-int/lit8" padding codeRegisterVDst listSeparator codeRegister listSeparator intValue optPadding [padding commentSequence] CRLF;
cmdAndLong              = optPadding "and-long" padding codeRegisterV64Dst listSeparator codeRegister64 listSeparator codeRegister64 optPadding [padding commentSequence] CRLF;
cmdAndLong2addr         = optPadding "and-long/2addr" padding codeRegisterV64Dst listSeparator codeRegister64 optPadding [padding commentSequence] CRLF;
cmdAget                 = optPadding "aget" padding codeRegisterVDst listSeparator codeRegister listSeparator codeRegister optPadding [padding commentSequence] CRLF;
cmdAgetBoolean          = optPadding "aget-boolean" padding codeRegisterVDst listSeparator codeRegister listSeparator codeRegister optPadding [padding commentSequence] CRLF;
cmdAgetByte             = optPadding "aget-byte" padding codeRegisterVDst listSeparator codeRegister listSeparator codeRegister optPadding [padding commentSequence] CRLF;
cmdAgetChar             = optPadding "aget-char" padding codeRegisterVDst listSeparator codeRegister listSeparator codeRegister optPadding [padding commentSequence] CRLF;
cmdAgetObject           = optPadding "aget-object" padding codeRegisterVDst listSeparator codeRegister listSeparator codeRegister optPadding [padding commentSequence] CRLF;
cmdAgetShort            = optPadding "aget-short" padding codeRegisterVDst listSeparator codeRegister listSeparator codeRegister optPadding [padding commentSequence] CRLF;
cmdAgetWide             = optPadding "aget-wide" padding codeRegisterV64Dst listSeparator codeRegister listSeparator codeRegister optPadding [padding commentSequence] CRLF;
cmdAput                 = optPadding "aput" padding codeRegisterV listSeparator codeRegister listSeparator codeRegister optPadding [padding commentSequence] CRLF;
cmdAputBoolean          = optPadding "aput-boolean" padding codeRegisterV listSeparator codeRegister listSeparator codeRegister optPadding [padding commentSequence] CRLF;
cmdAputByte             = optPadding "aput-byte" padding codeRegisterV listSeparator codeRegister listSeparator codeRegister optPadding [padding commentSequence] CRLF;
cmdAputChar             = optPadding "aput-char" padding codeRegisterV listSeparator codeRegister listSeparator codeRegister optPadding [padding commentSequence] CRLF;
cmdAputObject           = optPadding "aput-object" padding codeRegisterV listSeparator codeRegister listSeparator codeRegister optPadding [padding commentSequence] CRLF;
cmdAputShort            = optPadding "aput-short" padding codeRegisterV listSeparator codeRegister listSeparator codeRegister optPadding [padding commentSequence] CRLF;
cmdAputWide             = optPadding "aput-wide" padding codeRegisterV64 listSeparator codeRegister listSeparator codeRegister optPadding [padding commentSequence] CRLF;
cmdArrayLength          = optPadding "array-length" padding codeRegisterVDst listSeparator codeRegister optPadding [padding commentSequence] CRLF;
cmdCheckCast            = optPadding "check-cast" padding codeRegister listSeparator smaliClassRef optPadding [padding commentSequence] CRLF;
cmdCmpgDouble           = optPadding "cmpg-double" padding codeRegisterVDst listSeparator codeRegister64 listSeparator codeRegister64 optPadding [padding commentSequence] CRLF;
cmdCmpgFloat            = optPadding "cmpg-float" padding codeRegisterVDst listSeparator codeRegister listSeparator codeRegister optPadding [padding commentSequence] CRLF;
cmdCmplDouble           = optPadding "cmpl-double" padding codeRegisterVDst listSeparator codeRegister64 listSeparator codeRegister64 optPadding [padding commentSequence] CRLF;
cmdCmplFloat            = optPadding "cmpl-float" padding codeRegisterVDst listSeparator codeRegister listSeparator codeRegister optPadding [padding commentSequence] CRLF;
cmdCmpLong              = optPadding "cmp-long" padding codeRegisterVDst listSeparator codeRegister64 listSeparator codeRegister64 optPadding [padding commentSequence] CRLF;
cmdConst                = optPadding "const" padding codeRegisterVDst listSeparator intValue optPadding [padding commentSequence] CRLF;
cmdConst16              = optPadding "const/16" padding codeRegisterVDst listSeparator intValue optPadding [padding commentSequence] CRLF;
cmdConst4               = optPadding "const/4" padding codeRegisterVDst listSeparator intValue optPadding [padding commentSequence] CRLF;
cmdConstClass           = optPadding "const-class" padding codeRegisterVDst listSeparator smaliClassRef optPadding [padding commentSequence] CRLF;
cmdConstHigh16          = optPadding "const/high16" padding codeRegisterVDst listSeparator intValue optPadding [padding commentSequence] CRLF;
cmdConstString          = optPadding "const-string" padding codeRegisterVDst listSeparator strValue optPadding [padding commentSequence] CRLF;
cmdConstStringJumbo     = optPadding "const-string/jumbo" padding codeRegisterVDst listSeparator strValue optPadding [padding commentSequence] CRLF;
cmdConstWide            = optPadding "const-wide" padding codeRegisterV64Dst listSeparator intValue optPadding [padding commentSequence] CRLF;
cmdConstWide16          = optPadding "const-wide/16" padding codeRegisterV64Dst listSeparator intValue optPadding [padding commentSequence] CRLF;
cmdConstWide32          = optPadding "const-wide/32" padding codeRegisterV64Dst listSeparator intValue optPadding [padding commentSequence] CRLF;
cmdConstWideHigh16      = optPadding "const-wide/high16" padding codeRegisterV64Dst listSeparator intValue optPadding [padding commentSequence] CRLF;
cmdDivFloat             = optPadding "div-float" padding codeRegisterVDst listSeparator codeRegister listSeparator codeRegister optPadding [padding commentSequence] CRLF;
cmdDivFloat2addr        = optPadding "div-float/2addr" padding codeRegisterVDst listSeparator codeRegister optPadding [padding commentSequence] CRLF;
cmdDivDouble            = optPadding "div-double" padding codeRegisterV64Dst listSeparator codeRegister64 listSeparator codeRegister64 optPadding [padding commentSequence] CRLF;
cmdDivDouble2addr       = optPadding "div-double/2addr" padding codeRegisterV64Dst listSeparator codeRegister64 optPadding [padding commentSequence] CRLF;
cmdDivInt               = optPadding "div-int" padding codeRegisterVDst listSeparator codeRegister listSeparator codeRegister optPadding [padding commentSequence] CRLF;
cmdDivInt2addr          = optPadding "div-int/2addr" padding codeRegisterVDst listSeparator codeRegister optPadding [padding commentSequence] CRLF;
cmdDivIntLit16          = optPadding "div-int/lit16" padding codeRegisterVDst listSeparator codeRegister listSeparator intValue optPadding [padding commentSequence] CRLF;
cmdDivIntLit8           = optPadding "div-int/lit8" padding codeRegisterVDst listSeparator codeRegister listSeparator intValue optPadding [padding commentSequence] CRLF;
cmdDivLong              = optPadding "div-long" padding codeRegisterV64Dst listSeparator codeRegister64 listSeparator codeRegister64 optPadding [padding commentSequence] CRLF;
cmdDivLong2addr         = optPadding "div-long/2addr" padding codeRegisterV64Dst listSeparator codeRegister64 optPadding [padding commentSequence] CRLF;
cmdDoubleToFloat        = optPadding "double-to-float" padding codeRegisterVDst listSeparator codeRegister64 optPadding [padding commentSequence] CRLF;
cmdDoubleToInt          = optPadding "double-to-int" padding codeRegisterVDst listSeparator codeRegister64 optPadding [padding commentSequence] CRLF;
cmdDoubleToLong         = optPadding "double-to-long" padding codeRegisterV64Dst listSeparator codeRegister64 optPadding [padding commentSequence] CRLF;
cmdFillArrayData        = optPadding "fill-array-data" padding todoStubLine optPadding [padding commentSequence] CRLF;
cmdFilledNewArray       = optPadding "filled-new-array" padding todoStubLine optPadding [padding commentSequence] CRLF;
cmdFilledNewArrayRange  = optPadding "filled-new-array/range" padding todoStubLine optPadding [padding commentSequence] CRLF;
cmdFloatToDouble        = optPadding "float-to-double" padding codeRegisterV64Dst listSeparator codeRegister optPadding [padding commentSequence] CRLF;
cmdFloatToInt           = optPadding "float-to-int" padding codeRegisterVDst listSeparator codeRegister optPadding [padding commentSequence] CRLF;
cmdFloatToLong          = optPadding "float-to-long" padding codeRegisterV64Dst listSeparator codeRegister optPadding [padding commentSequence] CRLF;
cmdGoto                 = optPadding "goto" padding codeLabel optPadding [padding commentSequence] CRLF;
cmdGoto16               = optPadding "goto/16" padding codeLabel optPadding [padding commentSequence] CRLF;
cmdGoto32               = optPadding "goto/32" padding codeLabel optPadding [padding commentSequence] CRLF;
cmdIfEq                 = optPadding "if-eq" padding codeRegister listSeparator codeRegister listSeparator codeLabel optPadding [padding commentSequence] CRLF;
cmdIfEqz                = optPadding "if-eqz" padding codeRegister listSeparator codeLabel optPadding [padding commentSequence] CRLF;
cmdIfGe                 = optPadding "if-ge" padding codeRegister listSeparator codeRegister listSeparator codeLabel optPadding [padding commentSequence] CRLF;
cmdIfGez                = optPadding "if-gez" padding codeRegister listSeparator codeLabel optPadding [padding commentSequence] CRLF;
cmdIfGt                 = optPadding "if-gt" padding codeRegister listSeparator codeRegister listSeparator codeLabel optPadding [padding commentSequence] CRLF;
cmdIfGtz                = optPadding "if-gtz" padding codeRegister listSeparator codeLabel optPadding [padding commentSequence] CRLF;
cmdIfLe                 = optPadding "if-le" padding codeRegister listSeparator codeRegister listSeparator codeLabel optPadding [padding commentSequence] CRLF;
cmdIfLez                = optPadding "if-lez" padding codeRegister listSeparator codeLabel optPadding [padding commentSequence] CRLF;
cmdIfLt                 = optPadding "if-lt" padding codeRegister listSeparator codeRegister listSeparator codeLabel optPadding [padding commentSequence] CRLF;
cmdIfLtz                = optPadding "if-ltz" padding codeRegister listSeparator codeLabel optPadding [padding commentSequence] CRLF;
cmdIfNe                 = optPadding "if-ne" padding codeRegister listSeparator codeRegister listSeparator codeLabel optPadding [padding commentSequence] CRLF;
cmdIfNez                = optPadding "if-nez" padding codeRegister listSeparator codeLabel optPadding [padding commentSequence] CRLF;
cmdIget                 = optPadding "iget" padding codeRegisterVDst listSeparator codeRegister listSeparator smaliFieldRef optPadding [padding commentSequence] CRLF;
cmdIgetBoolean          = optPadding "iget-boolean" padding codeRegisterVDst listSeparator codeRegister listSeparator smaliFieldRef optPadding [padding commentSequence] CRLF;
cmdIgetByte             = optPadding "iget-byte" padding codeRegisterVDst listSeparator codeRegister listSeparator smaliFieldRef optPadding [padding commentSequence] CRLF;
cmdIgetChar             = optPadding "iget-char" padding codeRegisterVDst listSeparator codeRegister listSeparator smaliFieldRef optPadding [padding commentSequence] CRLF;
cmdIgetObject           = optPadding "iget-object" padding codeRegisterVDst listSeparator codeRegister listSeparator smaliFieldRef optPadding [padding commentSequence] CRLF;
cmdIgetShort            = optPadding "iget-short" padding codeRegisterVDst listSeparator codeRegister listSeparator smaliFieldRef optPadding [padding commentSequence] CRLF;
cmdIgetWide             = optPadding "iget-wide" padding codeRegisterV64Dst listSeparator codeRegister listSeparator smaliFieldRef optPadding [padding commentSequence] CRLF;
cmdInstanceOf           = optPadding "instance-of" padding codeRegisterVDst listSeparator codeRegister listSeparator smaliClassRef optPadding [padding commentSequence] CRLF;
cmdIntToByte            = optPadding "int-to-byte" padding codeRegisterVDst listSeparator codeRegister optPadding [padding commentSequence] CRLF;
cmdIntToChar            = optPadding "int-to-char" padding codeRegisterVDst listSeparator codeRegister optPadding [padding commentSequence] CRLF;
cmdIntToDouble          = optPadding "int-to-double" padding codeRegisterV64Dst listSeparator codeRegister optPadding [padding commentSequence] CRLF;
cmdIntToFloat           = optPadding "int-to-float" padding codeRegisterVDst listSeparator codeRegister optPadding [padding commentSequence] CRLF;
cmdIntToLong            = optPadding "int-to-long" padding codeRegisterV64Dst listSeparator codeRegister optPadding [padding commentSequence] CRLF;
cmdIntToShort           = optPadding "int-to-short" padding codeRegisterVDst listSeparator codeRegister optPadding [padding commentSequence] CRLF;
cmdInvokeDirect         = optPadding "invoke-direct" padding codeRegisterGroup listSeparator smaliMethodRef optPadding [padding commentSequence] CRLF;
cmdInvokeDirectRange    = optPadding "invoke-direct/range" padding codeRegisterGroup listSeparator smaliMethodRef optPadding [padding commentSequence] CRLF;
cmdInvokeInterface      = optPadding "invoke-interface" padding codeRegisterGroup listSeparator smaliMethodRef optPadding [padding commentSequence] CRLF;
cmdInvokeInterfaceRange = optPadding "invoke-interface/range" padding codeRegisterGroup listSeparator smaliMethodRef optPadding [padding commentSequence] CRLF;
cmdInvokeStatic         = optPadding "invoke-static" padding codeRegisterGroup listSeparator smaliMethodRef optPadding [padding commentSequence] CRLF;
cmdInvokeStaticRange    = optPadding "invoke-static/range" padding codeRegisterGroup listSeparator smaliMethodRef optPadding [padding commentSequence] CRLF;
cmdInvokeSuper          = optPadding "invoke-super" padding codeRegisterGroup listSeparator smaliMethodRef optPadding [padding commentSequence] CRLF;
cmdInvokeSuperRange     = optPadding "invoke-super/range" padding codeRegisterGroup listSeparator smaliMethodRef optPadding [padding commentSequence] CRLF;
cmdInvokeVirtual        = optPadding "invoke-virtual" padding codeRegisterGroup listSeparator smaliMethodRef optPadding [padding commentSequence] CRLF;
cmdInvokeVirtualRange   = optPadding "invoke-virtual/range" padding codeRegisterGroup listSeparator smaliMethodRef optPadding [padding commentSequence] CRLF;
cmdIput                 = optPadding "iput" padding codeRegister listSeparator codeRegister listSeparator smaliFieldRef optPadding [padding commentSequence] CRLF;
cmdIputBoolean          = optPadding "iput-boolean" padding codeRegister listSeparator codeRegister listSeparator smaliFieldRef optPadding [padding commentSequence] CRLF;
cmdIputByte             = optPadding "iput-byte" padding codeRegister listSeparator codeRegister listSeparator smaliFieldRef optPadding [padding commentSequence] CRLF;
cmdIputChar             = optPadding "iput-char" padding codeRegister listSeparator codeRegister listSeparator smaliFieldRef optPadding [padding commentSequence] CRLF;
cmdIputObject           = optPadding "iput-object" padding codeRegister listSeparator codeRegister listSeparator smaliFieldRef optPadding [padding commentSequence] CRLF;
cmdIputShort            = optPadding "iput-short" padding codeRegister listSeparator codeRegister listSeparator smaliFieldRef optPadding [padding commentSequence] CRLF;
cmdIputWide             = optPadding "iput-wide" padding codeRegister64 listSeparator codeRegister listSeparator smaliFieldRef optPadding [padding commentSequence] CRLF;
cmdLongToDouble         = optPadding "long-to-double" padding codeRegisterV64Dst listSeparator codeRegister64 optPadding [padding commentSequence] CRLF;
cmdLongToFloat          = optPadding "long-to-float" padding codeRegisterVDst listSeparator codeRegister64 optPadding [padding commentSequence] CRLF;
cmdLongToInt            = optPadding "long-to-int" padding codeRegisterVDst listSeparator codeRegister64 optPadding [padding commentSequence] CRLF;
cmdMonitorEnter         = optPadding "monitor-enter" padding codeRegister optPadding [padding commentSequence] CRLF;
cmdMonitorExit          = optPadding "monitor-exit" padding codeRegister optPadding [padding commentSequence] CRLF;
cmdMove                 = optPadding "move" padding codeRegisterVDst listSeparator codeRegister optPadding [padding commentSequence] CRLF;
cmdMove16               = optPadding "move/16" padding codeRegisterVDst listSeparator codeRegister optPadding [padding commentSequence] CRLF;
cmdMoveException        = optPadding "move-exception" padding codeRegisterVDst optPadding [padding commentSequence] CRLF;
cmdMoveFrom16           = optPadding "move/from16" padding codeRegisterVDst listSeparator codeRegister optPadding [padding commentSequence] CRLF;
cmdMoveObject           = optPadding "move-object" padding codeRegisterVDst listSeparator codeRegister optPadding [padding commentSequence] CRLF;
cmdMoveObject16         = optPadding "move-object/16" padding codeRegisterVDst listSeparator codeRegister optPadding [padding commentSequence] CRLF;
cmdMoveObjectFrom16     = optPadding "move-object/from16" padding codeRegisterVDst listSeparator codeRegister optPadding [padding commentSequence] CRLF;
cmdMoveResult           = optPadding "move-result" padding codeRegisterVDst optPadding [padding commentSequence] CRLF;
cmdMoveResultObject     = optPadding "move-result-object" padding codeRegisterVDst optPadding [padding commentSequence] CRLF;
cmdMoveResultWide       = optPadding "move-result-wide" padding codeRegisterV64Dst optPadding [padding commentSequence] CRLF;
cmdMoveWide             = optPadding "move-wide" padding codeRegisterV64Dst listSeparator codeRegister64 optPadding [padding commentSequence] CRLF;
cmdMoveWide16           = optPadding "move-wide/16" padding codeRegisterV64Dst listSeparator codeRegister64 optPadding [padding commentSequence] CRLF;
cmdMoveWideFrom16       = optPadding "move-wide/from16" padding codeRegisterV64Dst listSeparator codeRegister64 optPadding [padding commentSequence] CRLF;
cmdMulFloat             = optPadding "mul-float" padding codeRegisterVDst listSeparator codeRegister listSeparator codeRegister optPadding [padding commentSequence] CRLF;
cmdMulFloat2addr        = optPadding "mul-float/2addr" padding codeRegisterVDst listSeparator codeRegister optPadding [padding commentSequence] CRLF;
cmdMulDouble            = optPadding "mul-double" padding codeRegisterV64Dst listSeparator codeRegister64 listSeparator codeRegister64 optPadding [padding commentSequence] CRLF;
cmdMulDouble2addr       = optPadding "mul-double/2addr" padding codeRegisterV64Dst listSeparator codeRegister64 optPadding [padding commentSequence] CRLF;
cmdMulInt               = optPadding "mul-int" padding codeRegisterVDst listSeparator codeRegister listSeparator codeRegister optPadding [padding commentSequence] CRLF;
cmdMulInt2addr          = optPadding "mul-int/2addr" padding codeRegisterVDst listSeparator codeRegister optPadding [padding commentSequence] CRLF;
cmdMulIntLit16          = optPadding "mul-int/lit16" padding codeRegisterVDst listSeparator codeRegister listSeparator intValue optPadding [padding commentSequence] CRLF;
cmdMulIntLit8           = optPadding "mul-int/lit8" padding codeRegisterVDst listSeparator codeRegister listSeparator intValue optPadding [padding commentSequence] CRLF;
cmdMulLong              = optPadding "mul-long" padding codeRegisterV64Dst listSeparator codeRegister64 listSeparator codeRegister64 optPadding [padding commentSequence] CRLF;
cmdMulLong2addr         = optPadding "mul-long/2addr" padding codeRegisterV64Dst listSeparator codeRegister64 optPadding [padding commentSequence] CRLF;
cmdNegDouble            = optPadding "neg-double" padding codeRegisterV64Dst listSeparator codeRegister64 optPadding [padding commentSequence] CRLF;
cmdNegFloat             = optPadding "neg-float" padding codeRegisterVDst listSeparator codeRegister optPadding [padding commentSequence] CRLF;
cmdNegInt               = optPadding "neg-int" padding codeRegisterVDst listSeparator codeRegister optPadding [padding commentSequence] CRLF;
cmdNegLong              = optPadding "neg-long" padding codeRegisterV64Dst listSeparator codeRegister64 optPadding [padding commentSequence] CRLF;
cmdNewArray             = optPadding "new-array" padding codeRegisterVDst listSeparator codeRegister listSeparator smaliClassRef optPadding [padding commentSequence] CRLF;
cmdNewInstance          = optPadding "new-instance" padding codeRegisterVDst listSeparator smaliClassRef optPadding [padding commentSequence] CRLF;
cmdNop                  = optPadding "nop" optPadding [padding commentSequence] CRLF;
cmdNotInt               = optPadding "not-int" padding codeRegisterVDst listSeparator codeRegister optPadding [padding commentSequence] CRLF;
cmdNotLong              = optPadding "not-long" padding codeRegisterV64Dst listSeparator codeRegister64 optPadding [padding commentSequence] CRLF;
cmdOrInt                = optPadding "or-int" padding codeRegisterVDst listSeparator codeRegister listSeparator codeRegister optPadding [padding commentSequence] CRLF;
cmdOrInt2addr           = optPadding "or-int/2addr" padding codeRegisterVDst listSeparator codeRegister optPadding [padding commentSequence] CRLF;
cmdOrIntLit16           = optPadding "or-int/lit16" padding codeRegisterVDst listSeparator codeRegister listSeparator intValue optPadding [padding commentSequence] CRLF;
cmdOrIntLit8            = optPadding "or-int/lit8" padding codeRegisterVDst listSeparator codeRegister listSeparator intValue optPadding [padding commentSequence] CRLF;
cmdOrLong               = optPadding "or-long" padding codeRegisterV64Dst listSeparator codeRegister64 listSeparator codeRegister64 optPadding [padding commentSequence] CRLF;
cmdOrLong2addr          = optPadding "or-long/2addr" padding codeRegisterV64Dst listSeparator codeRegister64 optPadding [padding commentSequence] CRLF;
cmdPackedSwitch         = optPadding "packed-switch" padding todoStubLine optPadding [padding commentSequence] CRLF;
cmdRemFloat             = optPadding "rem-float" padding codeRegisterVDst listSeparator codeRegister listSeparator codeRegister optPadding [padding commentSequence] CRLF;
cmdRemFloat2addr        = optPadding "rem-float/2addr" padding codeRegisterVDst listSeparator codeRegister optPadding [padding commentSequence] CRLF;
cmdRemDouble            = optPadding "rem-double" padding codeRegisterV64Dst listSeparator codeRegister64 listSeparator codeRegister64 optPadding [padding commentSequence] CRLF;
cmdRemDouble2addr       = optPadding "rem-double/2addr" padding codeRegisterV64Dst listSeparator codeRegister64 optPadding [padding commentSequence] CRLF;
cmdRemInt               = optPadding "rem-int" padding codeRegisterVDst listSeparator codeRegister listSeparator codeRegister optPadding [padding commentSequence] CRLF;
cmdRemInt2addr          = optPadding "rem-int/2addr" padding codeRegisterVDst listSeparator codeRegister optPadding [padding commentSequence] CRLF;
cmdRemIntLit16          = optPadding "rem-int/lit16" padding codeRegisterVDst listSeparator codeRegister listSeparator intValue optPadding [padding commentSequence] CRLF;
cmdRemIntLit8           = optPadding "rem-int/lit8" padding codeRegisterVDst listSeparator codeRegister listSeparator intValue optPadding [padding commentSequence] CRLF;
cmdRemLong              = optPadding "rem-long" padding codeRegisterV64Dst listSeparator codeRegister64 listSeparator codeRegister64 optPadding [padding commentSequence] CRLF;
cmdRemLong2addr         = optPadding "rem-long/2addr" padding codeRegisterV64Dst listSeparator codeRegister64 optPadding [padding commentSequence] CRLF;
cmdReturn               = optPadding "return" padding codeRegisterRet optPadding [padding commentSequence] CRLF;
cmdReturnObject         = optPadding "return-object" padding codeRegisterRet optPadding [padding commentSequence] CRLF;
cmdReturnVoid           = optPadding "return-void" optPadding [padding commentSequence] CRLF;
cmdReturnWide           = optPadding "return-wide" padding codeRegisterRet64 optPadding [padding commentSequence] CRLF;
cmdRsubInt              = optPadding "rsub-int" padding codeRegisterVDst listSeparator codeRegister listSeparator intValue optPadding [padding commentSequence] CRLF;
cmdRsubIntLit8          = optPadding "rsub-int/lit8" padding codeRegisterVDst listSeparator codeRegister listSeparator intValue optPadding [padding commentSequence] CRLF;
cmdSget                 = optPadding "sget" padding codeRegisterVDst listSeparator smaliFieldRef optPadding [padding commentSequence] CRLF;
cmdSgetBoolean          = optPadding "sget-boolean" padding codeRegisterVDst listSeparator smaliFieldRef optPadding [padding commentSequence] CRLF;
cmdSgetByte             = optPadding "sget-byte" padding codeRegisterVDst listSeparator smaliFieldRef optPadding [padding commentSequence] CRLF;
cmdSgetChar             = optPadding "sget-char" padding codeRegisterVDst listSeparator smaliFieldRef optPadding [padding commentSequence] CRLF;
cmdSgetObject           = optPadding "sget-object" padding codeRegisterVDst listSeparator smaliFieldRef optPadding [padding commentSequence] CRLF;
cmdSgetShort            = optPadding "sget-short" padding codeRegisterVDst listSeparator smaliFieldRef optPadding [padding commentSequence] CRLF;
cmdSgetWide             = optPadding "sget-wide" padding codeRegisterV64Dst listSeparator smaliFieldRef optPadding [padding commentSequence] CRLF;
cmdShlInt               = optPadding "shl-int" padding codeRegisterVDst listSeparator codeRegister listSeparator codeRegister optPadding [padding commentSequence] CRLF;
cmdShlInt2addr          = optPadding "shl-int/2addr" padding codeRegisterVDst listSeparator codeRegister optPadding [padding commentSequence] CRLF;
cmdShlIntLit8           = optPadding "shl-int/lit8" padding codeRegisterVDst listSeparator codeRegister listSeparator intValue optPadding [padding commentSequence] CRLF;
cmdShlLong              = optPadding "shl-long" padding codeRegisterV64Dst listSeparator codeRegister64 listSeparator codeRegister64 optPadding [padding commentSequence] CRLF;
cmdShlLong2addr         = optPadding "shl-long/2addr" padding codeRegisterV64Dst listSeparator codeRegister64 optPadding [padding commentSequence] CRLF;
cmdShrInt               = optPadding "shr-int" padding codeRegisterVDst listSeparator codeRegister listSeparator codeRegister optPadding [padding commentSequence] CRLF;
cmdShrInt2addr          = optPadding "shr-int/2addr" padding codeRegisterVDst listSeparator codeRegister optPadding [padding commentSequence] CRLF;
cmdShrIntLit8           = optPadding "shr-int/lit8" padding codeRegisterVDst listSeparator codeRegister listSeparator intValue optPadding [padding commentSequence] CRLF;
cmdShrLong              = optPadding "shr-long" padding codeRegisterV64Dst listSeparator codeRegister64 listSeparator codeRegister64 optPadding [padding commentSequence] CRLF;
cmdShrLong2addr         = optPadding "shr-long/2addr" padding codeRegisterV64Dst listSeparator codeRegister64 optPadding [padding commentSequence] CRLF;
cmdSparseSwitch         = optPadding "sparse-switch" padding todoStubLine optPadding [padding commentSequence] CRLF;
cmdSput                 = optPadding "sput" padding codeRegister listSeparator smaliFieldRef optPadding [padding commentSequence] CRLF;
cmdSputBoolean          = optPadding "sput-boolean" padding codeRegister listSeparator smaliFieldRef optPadding [padding commentSequence] CRLF;
cmdSputByte             = optPadding "sput-byte" padding codeRegister listSeparator smaliFieldRef optPadding [padding commentSequence] CRLF;
cmdSputChar             = optPadding "sput-char" padding codeRegister listSeparator smaliFieldRef optPadding [padding commentSequence] CRLF;
cmdSputObject           = optPadding "sput-object" padding codeRegister listSeparator smaliFieldRef optPadding [padding commentSequence] CRLF;
cmdSputShort            = optPadding "sput-short" padding codeRegister listSeparator smaliFieldRef optPadding [padding commentSequence] CRLF;
cmdSputWide             = optPadding "sput-wide" padding codeRegister64 listSeparator smaliFieldRef optPadding [padding commentSequence] CRLF;
cmdSubFloat             = optPadding "sub-float" padding codeRegisterVDst listSeparator codeRegister listSeparator codeRegister optPadding [padding commentSequence] CRLF;
cmdSubFloat2addr        = optPadding "sub-float/2addr" padding codeRegisterVDst listSeparator codeRegister optPadding [padding commentSequence] CRLF;
cmdSubDouble            = optPadding "sub-double" padding codeRegisterV64Dst listSeparator codeRegister64 listSeparator codeRegister64 optPadding [padding commentSequence] CRLF;
cmdSubDouble2addr       = optPadding "sub-double/2addr" padding codeRegisterV64Dst listSeparator codeRegister64 optPadding [padding commentSequence] CRLF;
cmdSubInt               = optPadding "sub-int" padding codeRegisterVDst listSeparator codeRegister listSeparator codeRegister optPadding [padding commentSequence] CRLF;
cmdSubInt2addr          = optPadding "sub-int/2addr" padding codeRegisterVDst listSeparator codeRegister optPadding [padding commentSequence] CRLF;
cmdSubLong              = optPadding "sub-long" padding codeRegisterV64Dst listSeparator codeRegister64 listSeparator codeRegister64 optPadding [padding commentSequence] CRLF;
cmdSubLong2addr         = optPadding "sub-long/2addr" padding codeRegisterV64Dst listSeparator codeRegister64 optPadding [padding commentSequence] CRLF;
cmdThrow                = optPadding "throw" padding codeRegister optPadding [padding commentSequence] CRLF;
cmdUshrInt              = optPadding "ushr-int" padding codeRegisterVDst listSeparator codeRegister listSeparator codeRegister optPadding [padding commentSequence] CRLF;
cmdUshrInt2addr         = optPadding "ushr-int/2addr" padding codeRegisterVDst listSeparator codeRegister optPadding [padding commentSequence] CRLF;
cmdUshrIntLit8          = optPadding "ushr-int/lit8" padding codeRegisterVDst listSeparator codeRegister listSeparator intValue optPadding [padding commentSequence] CRLF;
cmdUshrLong             = optPadding "ushr-long" padding codeRegisterV64Dst listSeparator codeRegister64 listSeparator codeRegister64 optPadding [padding commentSequence] CRLF;
cmdUshrLong2addr        = optPadding "ushr-long/2addr" padding codeRegisterV64Dst listSeparator codeRegister64 optPadding [padding commentSequence] CRLF;
cmdXorInt               = optPadding "xor-int" padding codeRegisterVDst listSeparator codeRegister listSeparator codeRegister optPadding [padding commentSequence] CRLF;
cmdXorInt2addr          = optPadding "xor-int/2addr" padding codeRegisterVDst listSeparator codeRegister optPadding [padding commentSequence] CRLF;
cmdXorIntLit16          = optPadding "xor-int/lit16" padding codeRegisterVDst listSeparator codeRegister listSeparator intValue optPadding [padding commentSequence] CRLF;
cmdXorIntLit8           = optPadding "xor-int/lit8" padding codeRegisterVDst listSeparator codeRegister listSeparator intValue optPadding [padding commentSequence] CRLF;
cmdXorLong              = optPadding "xor-long" padding codeRegisterV64Dst listSeparator codeRegister64 listSeparator codeRegister64 optPadding [padding commentSequence] CRLF;
cmdXorLong2addr         = optPadding "xor-long/2addr" padding codeRegisterV64Dst listSeparator codeRegister64 optPadding [padding commentSequence] CRLF;


#zhw
cmdPrefixAny = "add-double";
cmdPrefixAny =/ "add-double/2addr";
cmdPrefixAny =/ "add-float";
cmdPrefixAny =/ "add-float/2addr";
cmdPrefixAny =/ "add-int";
cmdPrefixAny =/ "add-int/2addr";
cmdPrefixAny =/ "add-int/lit16";
cmdPrefixAny =/ "add-int/lit8";
cmdPrefixAny =/ "add-long";
cmdPrefixAny =/ "add-long/2addr";
cmdPrefixAny =/ "aget";
cmdPrefixAny =/ "aget-boolean";
cmdPrefixAny =/ "aget-byte";
cmdPrefixAny =/ "aget-char";
cmdPrefixAny =/ "aget-object";
cmdPrefixAny =/ "aget-short";
cmdPrefixAny =/ "aget-wide";
cmdPrefixAny =/ "and-int";
cmdPrefixAny =/ "and-int/2addr";
cmdPrefixAny =/ "and-int/lit16";
cmdPrefixAny =/ "and-int/lit8";
cmdPrefixAny =/ "and-long";
cmdPrefixAny =/ "and-long/2addr";
cmdPrefixAny =/ "aput";
cmdPrefixAny =/ "aput-boolean";
cmdPrefixAny =/ "aput-byte";
cmdPrefixAny =/ "aput-char";
cmdPrefixAny =/ "aput-object";
cmdPrefixAny =/ "aput-short";
cmdPrefixAny =/ "aput-wide";
cmdPrefixAny =/ "array-length";
cmdPrefixAny =/ "check-cast";
cmdPrefixAny =/ "cmpg-double";
cmdPrefixAny =/ "cmpg-float";
cmdPrefixAny =/ "cmpl-double";
cmdPrefixAny =/ "cmpl-float";
cmdPrefixAny =/ "cmp-long";
cmdPrefixAny =/ "const";
cmdPrefixAny =/ "const/16";
cmdPrefixAny =/ "const/4";
cmdPrefixAny =/ "const/high16";
cmdPrefixAny =/ "const-class";
cmdPrefixAny =/ "const-string";
cmdPrefixAny =/ "const-string/jumbo";
cmdPrefixAny =/ "const-wide";
cmdPrefixAny =/ "const-wide/16";
cmdPrefixAny =/ "const-wide/32";
cmdPrefixAny =/ "const-wide/high16";
cmdPrefixAny =/ "div-double";
cmdPrefixAny =/ "div-double/2addr";
cmdPrefixAny =/ "div-float";
cmdPrefixAny =/ "div-float/2addr";
cmdPrefixAny =/ "div-int";
cmdPrefixAny =/ "div-int/2addr";
cmdPrefixAny =/ "div-int/lit16";
cmdPrefixAny =/ "div-int/lit8";
cmdPrefixAny =/ "div-long";
cmdPrefixAny =/ "div-long/2addr";
cmdPrefixAny =/ "double-to-float";
cmdPrefixAny =/ "double-to-int";
cmdPrefixAny =/ "double-to-long";
cmdPrefixAny =/ "fill-array-data";
cmdPrefixAny =/ "filled-new-array";
cmdPrefixAny =/ "filled-new-array/range";
cmdPrefixAny =/ "float-to-double";
cmdPrefixAny =/ "float-to-int";
cmdPrefixAny =/ "float-to-long";
cmdPrefixAny =/ "goto";
cmdPrefixAny =/ "goto/16";
cmdPrefixAny =/ "goto/32";
cmdPrefixAny =/ "if-eq";
cmdPrefixAny =/ "if-eqz";
cmdPrefixAny =/ "if-ge";
cmdPrefixAny =/ "if-gez";
cmdPrefixAny =/ "if-gt";
cmdPrefixAny =/ "if-gtz";
cmdPrefixAny =/ "if-le";
cmdPrefixAny =/ "if-lez";
cmdPrefixAny =/ "if-lt";
cmdPrefixAny =/ "if-ltz";
cmdPrefixAny =/ "if-ne";
cmdPrefixAny =/ "if-nez";
cmdPrefixAny =/ "iget";
cmdPrefixAny =/ "iget-boolean";
cmdPrefixAny =/ "iget-byte";
cmdPrefixAny =/ "iget-char";
cmdPrefixAny =/ "iget-object";
cmdPrefixAny =/ "iget-short";
cmdPrefixAny =/ "iget-wide";
cmdPrefixAny =/ "instance-of";
cmdPrefixAny =/ "int-to-byte";
cmdPrefixAny =/ "int-to-char";
cmdPrefixAny =/ "int-to-double";
cmdPrefixAny =/ "int-to-float";
cmdPrefixAny =/ "int-to-long";
cmdPrefixAny =/ "int-to-short";
cmdPrefixAny =/ "invoke-direct";
cmdPrefixAny =/ "invoke-direct/range";
cmdPrefixAny =/ "invoke-interface";
cmdPrefixAny =/ "invoke-interface/range";
cmdPrefixAny =/ "invoke-static";
cmdPrefixAny =/ "invoke-static/range";
cmdPrefixAny =/ "invoke-super";
cmdPrefixAny =/ "invoke-super/range";
cmdPrefixAny =/ "invoke-virtual";
cmdPrefixAny =/ "invoke-virtual/range";
cmdPrefixAny =/ "iput";
cmdPrefixAny =/ "iput-boolean";
cmdPrefixAny =/ "iput-byte";
cmdPrefixAny =/ "iput-char";
cmdPrefixAny =/ "iput-object";
cmdPrefixAny =/ "iput-short";
cmdPrefixAny =/ "iput-wide";
cmdPrefixAny =/ "long-to-double";
cmdPrefixAny =/ "long-to-float";
cmdPrefixAny =/ "long-to-int";
cmdPrefixAny =/ "monitor-enter";
cmdPrefixAny =/ "monitor-exit";
cmdPrefixAny =/ "move";
cmdPrefixAny =/ "move/16";
cmdPrefixAny =/ "move/from16";
cmdPrefixAny =/ "move-exception";
cmdPrefixAny =/ "move-object";
cmdPrefixAny =/ "move-object/16";
cmdPrefixAny =/ "move-object/from16";
cmdPrefixAny =/ "move-result";
cmdPrefixAny =/ "move-result-object";
cmdPrefixAny =/ "move-result-wide";
cmdPrefixAny =/ "move-wide";
cmdPrefixAny =/ "move-wide/16";
cmdPrefixAny =/ "move-wide/from16";
cmdPrefixAny =/ "mul-double";
cmdPrefixAny =/ "mul-double/2addr";
cmdPrefixAny =/ "mul-float";
cmdPrefixAny =/ "mul-float/2addr";
cmdPrefixAny =/ "mul-int";
cmdPrefixAny =/ "mul-int/2addr";
cmdPrefixAny =/ "mul-int/lit16";
cmdPrefixAny =/ "mul-int/lit8";
cmdPrefixAny =/ "mul-long";
cmdPrefixAny =/ "mul-long/2addr";
cmdPrefixAny =/ "neg-double";
cmdPrefixAny =/ "neg-float";
cmdPrefixAny =/ "neg-int";
cmdPrefixAny =/ "neg-long";
cmdPrefixAny =/ "new-array";
cmdPrefixAny =/ "new-instance";
cmdPrefixAny =/ "nop";
cmdPrefixAny =/ "not-int";
cmdPrefixAny =/ "not-long";
cmdPrefixAny =/ "or-int";
cmdPrefixAny =/ "or-int/2addr";
cmdPrefixAny =/ "or-int/lit16";
cmdPrefixAny =/ "or-int/lit8";
cmdPrefixAny =/ "or-long";
cmdPrefixAny =/ "or-long/2addr";
cmdPrefixAny =/ "packed-switch";
cmdPrefixAny =/ "rem-double";
cmdPrefixAny =/ "rem-double/2addr";
cmdPrefixAny =/ "rem-float";
cmdPrefixAny =/ "rem-float/2addr";
cmdPrefixAny =/ "rem-int";
cmdPrefixAny =/ "rem-int/2addr";
cmdPrefixAny =/ "rem-int/lit16";
cmdPrefixAny =/ "rem-int/lit8";
cmdPrefixAny =/ "rem-long";
cmdPrefixAny =/ "rem-long/2addr";
cmdPrefixAny =/ "return";
cmdPrefixAny =/ "return-object";
cmdPrefixAny =/ "return-void";
cmdPrefixAny =/ "return-wide";
cmdPrefixAny =/ "rsub-int";
cmdPrefixAny =/ "rsub-int/lit8";
cmdPrefixAny =/ "sget";
cmdPrefixAny =/ "sget-boolean";
cmdPrefixAny =/ "sget-byte";
cmdPrefixAny =/ "sget-char";
cmdPrefixAny =/ "sget-object";
cmdPrefixAny =/ "sget-short";
cmdPrefixAny =/ "sget-wide";
cmdPrefixAny =/ "shl-int";
cmdPrefixAny =/ "shl-int/2addr";
cmdPrefixAny =/ "shl-int/lit8";
cmdPrefixAny =/ "shl-long";
cmdPrefixAny =/ "shl-long/2addr";
cmdPrefixAny =/ "shr-int";
cmdPrefixAny =/ "shr-int/2addr";
cmdPrefixAny =/ "shr-int/lit8";
cmdPrefixAny =/ "shr-long";
cmdPrefixAny =/ "shr-long/2addr";
cmdPrefixAny =/ "sparse-switch";
cmdPrefixAny =/ "sput";
cmdPrefixAny =/ "sput-boolean";
cmdPrefixAny =/ "sput-byte";
cmdPrefixAny =/ "sput-char";
cmdPrefixAny =/ "sput-object";
cmdPrefixAny =/ "sput-short";
cmdPrefixAny =/ "sput-wide";
cmdPrefixAny =/ "sub-double";
cmdPrefixAny =/ "sub-double/2addr";
cmdPrefixAny =/ "sub-float";
cmdPrefixAny =/ "sub-float/2addr";
cmdPrefixAny =/ "sub-int";
cmdPrefixAny =/ "sub-int/2addr";
cmdPrefixAny =/ "sub-long";
cmdPrefixAny =/ "sub-long/2addr";
cmdPrefixAny =/ "throw";
cmdPrefixAny =/ "ushr-int";
cmdPrefixAny =/ "ushr-int/2addr";
cmdPrefixAny =/ "ushr-int/lit8";
cmdPrefixAny =/ "ushr-long";
cmdPrefixAny =/ "ushr-long/2addr";
cmdPrefixAny =/ "xor-int";
cmdPrefixAny =/ "xor-int/2addr";
cmdPrefixAny =/ "xor-int/lit16";
cmdPrefixAny =/ "xor-int/lit8";
cmdPrefixAny =/ "xor-long";
cmdPrefixAny =/ "xor-long/2addr";


cmdCommon = optPadding cmdPrefixAny *(padding / VCHAR)  CRLF;